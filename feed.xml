<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='TODO' rel='self' type='application/rss+xml'/>
<title>
the scratch castle
</title>
<link>
TODO
</link>
<description>
TODO
</description>
<lastBuildDate>
Sat, 27 Feb 2016 03:33:45 -0800
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
TODO/posts/interactive-shortcut-demos-in-emacs.html
</guid>
<link>
TODO/posts/interactive-shortcut-demos-in-emacs.html
</link>
<title>
Shorty: An Interactive Tool for Learning Keyboard Shortcuts in Emacs (WIP)
</title>
<description>
&lt;h2&gt;&lt;a name=&quot;preface&quot;&gt;&lt;/a&gt;Preface&lt;/h2&gt;&lt;p&gt;(If you're in a hurry, click &lt;a href='#good-news'&gt;here&lt;/a&gt; to skip to the goods)&lt;/p&gt;&lt;p&gt;I started Emacs because I wanted an editor that would let me do things efficiently.  A huge part of being efficient in Emacs is learning keyboard shortcuts.  This is unfortunate because my leaky brain isn't very good at remembering a bunch of little details and there are a lot of default Emacs bindings you must internalize.  There's a tutorial that can be accessed with &lt;code&gt;C-h t&lt;/code&gt; and it's OK.  I do like that it's just a simple text file, but this comes with downsides.  The default tutorial is kludgy to navigate for a newbie and it offers no feedback on what you're doing.  Another issue is that the tutorial only covers Emacs core shortcuts, but we all know that third party packages make Emacs so much more than it's core.&lt;/p&gt;&lt;p&gt;I think we could bring more people to the editor if there was a tool that let users interactively learn ALL the shortcuts available in Emacs from within Emacs.  I decided this tool should have the following features:&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;each&amp;#95;shortcut&amp;#95;should&amp;#95;have&amp;#95;a&amp;#95;demonstration,&amp;#95;or&amp;#95;a&amp;#95;&quot;demo&quot;&quot;&gt;&lt;/a&gt;Each shortcut should have a demonstration, or a &quot;demo&quot;&lt;/h4&gt;&lt;p&gt;A demo is a live, automated demonstration of a shortcut in a buffer.  A live demo shows users what should happen when that shortcut is pressed.  This is much better than telling them.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;demos&amp;#95;can&amp;#95;be&amp;#95;played&amp;#95;and&amp;#95;replayed&quot;&gt;&lt;/a&gt;Demos can be played and replayed&lt;/h4&gt;&lt;p&gt;Once a demo is done playing, a replay option should be presented to the user.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;a&amp;#95;log&amp;#95;buffer&amp;#95;should&amp;#95;be&amp;#95;displayed&amp;#95;along&amp;#95;with&amp;#95;the&amp;#95;demo&amp;#95;buffer&quot;&gt;&lt;/a&gt;A log buffer should be displayed along with the demo buffer&lt;/h4&gt;&lt;p&gt;This buffer would show the keys being pressed and their associated command.  This gives users a script for replicating the demonstration later.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;demos&amp;#95;should&amp;#95;execute&amp;#95;in&amp;#95;a&amp;#95;controlled&amp;#95;environment&quot;&gt;&lt;/a&gt;Demos should execute in a controlled environment&lt;/h4&gt;&lt;p&gt;The author of the demo should be able to specify what major and minor modes are on while the demo is executing.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;users&amp;#95;should&amp;#95;be&amp;#95;able&amp;#95;to&amp;#95;practice&amp;#95;the&amp;#95;shortcut&amp;#95;from&amp;#95;within&amp;#95;the&amp;#95;tool&quot;&gt;&lt;/a&gt;Users should be able to practice the shortcut from within the tool&lt;/h4&gt;&lt;p&gt;Learning follows doing so once a demo is done playing, users should have the option to jump into the demo buffer and try it out.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;similar&amp;#95;demos&amp;#95;should&amp;#95;be&amp;#95;organized&amp;#95;into&amp;#95;&quot;playlists&quot;&quot;&gt;&lt;/a&gt;Similar demos should be organized into &quot;playlists&quot;&lt;/h4&gt;&lt;p&gt;For example, &lt;code&gt;C-n&lt;/code&gt;, &lt;code&gt;C-p&lt;/code&gt;, &lt;code&gt;C-f&lt;/code&gt;, and &lt;code&gt;C-b&lt;/code&gt; would be in the &quot;Basic Emacs Navigation&quot; playlist.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;a&amp;#95;user&amp;#95;should&amp;#95;be&amp;#95;able&amp;#95;to&amp;#95;pick&amp;#95;a&amp;#95;playlist&amp;#95;and&amp;#95;play&amp;#95;through&amp;#95;all&amp;#95;the&amp;#95;demos&amp;#95;contained&amp;#95;within&quot;&gt;&lt;/a&gt;A user should be able to pick a playlist and play through all the demos contained within&lt;/h4&gt;&lt;p&gt;Once a demo is over the user should have the option to move forward or backward through the playlist.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;playlists&amp;#95;should&amp;#95;be&amp;#95;organized&amp;#95;into&amp;#95;albums&quot;&gt;&lt;/a&gt;Playlists should be organized into albums&lt;/h4&gt;&lt;p&gt;An album represents all the shortcuts for a particular thing.  I would assume an emacs package would define a single album with one or more playlists.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;an&amp;#95;album&amp;#95;must&amp;#95;be&amp;#95;an&amp;#95;elisp&amp;#95;data&amp;#95;structure&amp;#95;and&amp;#95;contain&amp;#95;all&amp;#95;the&amp;#95;information&amp;#95;necessary&amp;#95;for&amp;#95;playing&amp;#95;the&amp;#95;demos/playlists&amp;#95;within&quot;&gt;&lt;/a&gt;An album must be an elisp data structure and contain all the information necessary for playing the demos/playlists within&lt;/h4&gt;&lt;p&gt;This is an obvious format to work with because Emacs understands it and package authors understand it.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;it&amp;#95;must&amp;#95;be&amp;#95;easy&amp;#95;to&amp;#95;use&quot;&gt;&lt;/a&gt;It must be easy to use&lt;/h4&gt;&lt;p&gt;To be better than a text file tutorial, the proposed tool must be just as easy to use.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;it&amp;#95;must&amp;#95;be&amp;#95;extendable&quot;&gt;&lt;/a&gt;It must be extendable&lt;/h4&gt;&lt;p&gt;Emacs is so much more than Emacs core so third party packages the user has installed should be able to hook into the tool and add their tutorials too.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;albums&amp;#95;should&amp;#95;be&amp;#95;easy&amp;#95;to&amp;#95;build&quot;&gt;&lt;/a&gt;Albums should be easy to build&lt;/h4&gt;&lt;p&gt;Package authors won't use the tool if making albums isn't easy.&lt;/p&gt;&lt;p&gt;&lt;a name=&quot;good-news&quot;&gt;&lt;/a&gt;&lt;h2&gt;&lt;a name=&quot;good&amp;#95;news&quot;&gt;&lt;/a&gt;Good News&lt;/h2&gt;&lt;/p&gt;&lt;p&gt;If all that sounds nice to you well I have some good news, I've almost finished building it.&lt;/p&gt;&lt;p&gt;At the moment I'm calling it &lt;a href='http://github.com/seanirby/shorty'&gt;shorty&lt;/a&gt;.  Here's it is in action:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/shorty-demo.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;Here's what happened:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;I told shorty to open up my albums buffer.  This is an outline of all the albums, demos, and playlists that shorty knows about.  This is the main UI for interacting with shorty.&lt;/li&gt;&lt;li&gt;I put my cursor on Playlist 1 &gt; Demo 1 and tell shorty to play that demo.&lt;/li&gt;&lt;li&gt;Shorty opens up a demo buffer and a log buffer then starts the demo while logging the keys being &quot;pressed&quot; by the program.&lt;/li&gt;&lt;li&gt;Once the demo is over, I press &quot;n&quot; to move to the next demo.&lt;/li&gt;&lt;li&gt;Once this demo is done playing I press &quot;q&quot; to quit.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Shorty currently satisfies most of the features I outlined above but it's still not 100%.  Let's take a deeper look.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;As mentioned before, demos are organized into playlists, and playlists are organized into albums.  Let's start at the top level and see what an album looks like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;list
    ;; The name of the album
    :name          &amp;quot;Example Album&amp;quot;
    ;; A list of the default minor modes descendant demos will use &amp;#40;Optional&amp;#41;
    :minor-modes   '&amp;#40;paredit-mode&amp;#41;
    ;; References are relative filepaths to a a textfile.
    ;; These refs may be used as values for the :text property in descendant demos
    :text-refs     &amp;#40;list :emacs-program  &amp;quot;sample-text/emacs-program&amp;quot;
                         :hello-world    &amp;quot;sample-text/hello-world&amp;quot;
                         :lorem-ipsum    &amp;quot;sample-text/lorem-ipsum&amp;quot;&amp;#41;
    :playlists     ...&amp;#41;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Pretty straightforward.&lt;/p&gt;&lt;p&gt;Here's a playlist.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;list
    :name   &amp;quot;Playlist 1&amp;quot;
    :demos  ...&amp;#41;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Playlists aren't very interesting :).&lt;/p&gt;&lt;p&gt;And finally, here's a demo:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;list
    :name   &amp;quot;Demo 1&amp;quot;
    ;; The text to be used in the demo buffer
    :text :lorem-ipsum
    ;; The key presses that are executed in the demo.
    :macro  &amp;quot;M-f C-k C-n M-f C-k C-n M-f C-k C-n M-f C-k C-n M-f C-k C-n M-f C-k C-n M-f C-k&amp;quot;&amp;#41;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The entire album looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;list :name          &amp;quot;Example Album&amp;quot;
      :minor-modes   '&amp;#40;paredit-mode&amp;#41;
      :text-refs     &amp;#40;list :emacs-program  &amp;quot;sample-text/emacs-program&amp;quot;
                           :hello-world    &amp;quot;sample-text/hello-world&amp;quot;
                           :lorem-ipsum    &amp;quot;sample-text/lorem-ipsum&amp;quot;&amp;#41;
      :playlists     &amp;#40;list &amp;#40;list :name   &amp;quot;Playlist 1&amp;quot;
                                 :demos  &amp;#40;list &amp;#40;list :name   &amp;quot;Demo 1&amp;quot;
                                                     :macro  &amp;quot;M-f C-k C-n M-f C-k C-n M-f C-k C-n M-f C-k C-n M-f C-k C-n M-f C-k C-n M-f C-k&amp;quot;
                                                     :text   :lorem-ipsum&amp;#41;
                                               &amp;#40;list :name   &amp;quot;Demo 2&amp;quot;
                                                     :macro  &amp;quot;2&amp;#42;M-f M-b 5&amp;#42;C-d g o o d b y e SPC c r u e l&amp;quot;
                                                     :text   &amp;quot;&amp;#40;message \&amp;quot;hello world\&amp;quot;&amp;#41;&amp;quot;&amp;#41;&amp;#41;&amp;#41;
                           &amp;#40;list :name   &amp;quot;Playlist 2&amp;quot;
                                 :demos  &amp;#40;list &amp;#40;list :name    &amp;quot;Demo 1&amp;quot;
                                                     :macro  &amp;quot;a b c d e f g&amp;quot;
                                                     :text   :hello-world&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The idea is that packages would define an album like &lt;code&gt;foo-shorty-album&lt;/code&gt; in their library and then users could add this album to the global &lt;code&gt;shorty-album-list&lt;/code&gt;.  When the user calls &lt;code&gt;shorty-album-buffer-open&lt;/code&gt;, shorty takes the list of albums and creates a read-only org buffer.  This buffer is the main UI and is basically just an outline of all the available albums.  Users can then navigate this file as they wish and play an album, playlist, or demo by calling &lt;code&gt;shorty-album-play&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;issues&quot;&gt;&lt;/a&gt;Issues&lt;/h2&gt;&lt;p&gt;There's currently a blocking issue regarding modes.  Package authors need to specify exactly what minor modes and what major mode should be on for a particular demo.  Shorty must respect this when it creates a new demo buffer. My current strategy is first turn off all the minor modes for a particular buffer then set the ones the author has specified.  I'm currently using a package called &lt;a href='https://github.com/ShingoFukuyama/manage-minor-mode'&gt;manage-minor-modes&lt;/a&gt; to handle this.  Unfortunately when you turn off all the minor modes for a buffer, it often causes side effects in other buffers too.  It's possible that an error during demo execution could wipe out all the minor modes in all the users buffers.  The author of manage-minor-modes is aware of this so he include a functoin &lt;code&gt;manage-minor-mode-restore-from-bals&lt;/code&gt; that restores all the current buffers to their original state.&lt;/p&gt;&lt;p&gt;Unfortunately, I've found that calling &lt;code&gt;manage-minor-mode-restore-from-bals&lt;/code&gt; sometimes will have no effect and the user will either have to turn all minor modes back on manually or restart Emacs.  This isn't so much an issue as when I first started developing shorty, but it's still possible.  This is obviously an unacceptable error so I need to figure out how to minimize this problem as much as possible before releasing.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;todo&quot;&gt;&lt;/a&gt;TODO&lt;/h2&gt;&lt;p&gt;There's still some work left to do before I can release this into the wild.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Need to add support for controlling the major mode of a demo.  This is kind of tricky.&lt;/li&gt;&lt;li&gt;Eliminate or minimize the minor mode problem described above.&lt;/li&gt;&lt;li&gt;Provide an easy way for package authors to write albums.  I don't know what this looks like yet.&lt;/li&gt;&lt;li&gt;Need to iron out the format of an album.  I don't know if keeping the full macro string in the demo is the right idea.&lt;/li&gt;&lt;li&gt;Allow the starting point of the cursor to be specified for a demo.&lt;/li&gt;&lt;li&gt;???&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I posted this with the tag WIP which means &quot;work in progress&quot;.  I plan to do more of these types of posts since I usually want to show off the stuff I'm working on so I can get ideas from the community before finishing it.  With that being said, please leave a comment below if you have any ideas or suggestions regarding shorty.  Here's a link to the source:&lt;/p&gt;&lt;p&gt;&lt;a href='http://github.com/seanirby/shorty'&gt;View shorty on github&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Thanks for reading.&lt;/p&gt;&lt;p&gt;— sean&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 26 Feb 2016 00:00:00 -0800
</pubDate>
</item>
<item>
<guid>
TODO/posts/highlight-code-blocks-in-emacs.html
</guid>
<link>
TODO/posts/highlight-code-blocks-in-emacs.html
</link>
<title>
Alternative Lisp Formatting Part 1
</title>
<description>
&lt;p&gt;Lately I've been thinking about how Lisp code could be displayed differently.  Do we really need all the parenthesis?&lt;/p&gt;&lt;p&gt;Now don't get me wrong, I don't hate the parens.  They are necessary for making Lisp homoiconic, which is arguably one of its best features. The parens also allow editing tools like &lt;a href='https://github.com/abo-abo/lispy'&gt;lispy&lt;/a&gt; and &lt;a href='https://www.emacswiki.org/emacs-test/ParEdit'&gt;paredit&lt;/a&gt; to leverage the structure of Lisp to make powerful text manipulation commands.&lt;/p&gt;&lt;p&gt;However, I do think the parens add a significant amount of visual clutter so I'm interested in different strategies that could  remedy this.  Since Lisp code has such a rigid structure, it should be easy to translate to other formats right?&lt;/p&gt;&lt;p&gt;Many people on the net have tried using indentation as a way to delimit the expressions.  I don't even have to look at that code to know I hate it.  So what other options are there?&lt;/p&gt;&lt;p&gt;One idea is to highlight the background of S-expressions according to their depth and do something with the surrounding parens.  I'm not all the way there yet, but I did start work on a prototype for Emacs.  I found this one package, &lt;a href='http://github.com/istib/rainbow-blocks'&gt;rainbow-blocks.el&lt;/a&gt;, that almost does what I want.  I added some small modifications such that the background is highlighted rather than the foreground.  The result is this:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/light.png&quot; alt=&quot;rainbow-block-bg enabled with a light theme&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/seanirby/rainbow-blocks-bg'&gt;rainbow-blocks-bg on github&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I also tried hiding the parens by setting them to the same color as the background, but you can quickly see why that wouldn't work.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/no-parens.png&quot; alt=&quot;rainbow-block-bg enabled with a light theme&quot; /&gt;&lt;/p&gt;&lt;p&gt;I'm not sure what I want to do next, but I think I will try swapping the paren characters for an svg image of a filled half circle.  This could have the same effect as the above picture but the left and right edges of an expression will be rounded.  We shall see.&lt;/p&gt;&lt;p&gt; — sean&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 20 Feb 2016 00:00:00 -0800
</pubDate>
</item>
<item>
<guid>
TODO/posts/emacs-and-helm.html
</guid>
<link>
TODO/posts/emacs-and-helm.html
</link>
<title>
Why I Use Helm and Why You Should Too
</title>
<description>
&lt;p&gt;Emacs is a whirlwind of shortcuts and commands for a beginner. Because Emacs isn't a true modal editor like VIM you must learn a plethora of keyboard shortcuts to edit text efficiently.  Richard Stallman, the creator of GNU Emacs, was well aware of this so he created the &quot;GNU Emacs Human Interface Machine&quot;, which was a specially designed keyboard for Emacs power users.&lt;/p&gt;&lt;p&gt;The picture below is an example of one of these machines.&lt;/p&gt;&lt;p&gt;&lt;figure&gt; &lt;img src=&quot;/img/emacs-human-interface-machine.jpg&quot;&gt;&lt;/img&gt; &lt;figcaption&gt; The GNU Emacs Human Interface Machine &lt;figcaption&gt; The keyboard impressed its users so much that they often felt compelled to put on a suit before operating it! &lt;/figcaption&gt; &lt;/figcaption&gt; &lt;/figure&gt;&lt;/p&gt;&lt;p&gt;All joking aside, Emacs's default interface isn't very user friendly when you don't know the shortcut or command name you want to execute.  When you run a command that requires user input, you're given an empty prompt. That's it.  If you read the tutorial then you may remember that you can press TAB to see some options. That's a little better I suppose, but it would be better if you could see your possibilities without asking for it.  Enter helm.&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/emacs-helm/helm'&gt;Helm&lt;/a&gt; is an extension package for Emacs that, among other things, hooks into many of the commands requiring user input and supplants them with a new command that presents the user with a prompt AND an interactive list of options that is fuzzy matched to what is typed in that prompt. It's sort of similar to the &lt;a href='http://docs.sublimetext.info/en/latest/file_management/file_management.html'&gt;goto anything&lt;/a&gt; commands that are available in Sublime Text, except it's available  on more than just a handful of commands.&lt;/p&gt;&lt;p&gt;Say I want to find a window command that splits the window into two vertical halves and all I know is that the command has 'window' and 'split' in its name and I'm not sure which term is first.  Helm makes it extremely easy to browse the available symbols(names) in the current Emacs environment using the 'helm-apropos' command.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/helm-apropos.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;In the demo above, I run 'helm-apropos' and try searching for a command that has 'window' followed by 'split' in its name.  I find nothing appropriate so I try the reverse and search for a command with 'split' followed by 'window' in its name.  I eventually find the correct answer which is 'split-window-right'.&lt;/p&gt;&lt;p&gt;There's an important feature to note about this kind of UI that isn't immediately obvious.  Because you're presented with all the possibilities, you end up learning the capabilities of the program by simply using the program.  Because of this side effect, Emacs became a much more understandable system after I installed helm. It's such a boon to the Emacs experience that I would consider changing editors if helm wasn't available.&lt;/p&gt;&lt;p&gt;Below I outline some useful helm commands followed by my favorite helm extension packages.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;built-in&amp;#95;helm&amp;#95;commands&quot;&gt;&lt;/a&gt;Built-In Helm Commands&lt;/h2&gt;&lt;h3&gt;&lt;a name=&quot;helm-find-file&amp;#95;/&amp;#95;bound&amp;#95;to&amp;#95;c-x&amp;#95;c-f&quot;&gt;&lt;/a&gt;helm-find-file / Bound to C-x C-f&lt;/h3&gt;Use this command to navigate your file system and open files.  The 'helm-find-file' command presents you with a list of files in your current working directory.  Pressing C-l will move you up to the parent's directory.  If your cursor is on a directory, C-j will move you into it.  Press RETURN to open a file.  Easy peasy.&lt;p&gt;&lt;img src=&quot;/img/helm-find-file.gif&quot; alt=&quot;Demo&quot; /&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;helm-m-x&amp;#95;/&amp;#95;bound&amp;#95;to&amp;#95;c-m&quot;&gt;&lt;/a&gt;helm-M-x / Bound to C-m&lt;/h3&gt;This command is similar to 'helm-apropos' except you're only presented with commands and pressing RETURN on a command will execute that command.&lt;p&gt;&lt;img src=&quot;/img/helm-M-x.gif&quot; alt=&quot;Demo&quot; /&gt;&lt;/p&gt;&lt;p&gt;Use helm-M-x as an alternative to typing M-x.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;helm-google&amp;#95;/&amp;#95;no&amp;#95;default&amp;#95;binding&quot;&gt;&lt;/a&gt;helm-google / No default binding&lt;/h3&gt;Search Google with helm.  The nice thing about this command is that results are populated as you type, just like searching Google in a browser.  Press RETURN on a result to open the link in your default browser.&lt;p&gt;&lt;img src=&quot;/img/helm-google.gif&quot; alt=&quot;Demo&quot; /&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;helm-apropos&amp;#95;/&amp;#95;bound&amp;#95;to&amp;#95;c-x&amp;#95;c&amp;#95;a&quot;&gt;&lt;/a&gt;helm-apropos / Bound to C-x c a&lt;/h3&gt;helm-apropos shows you the symbols of every possible command, function, variable, and face that is available in Emacs.  Think of it as a list of everything you can do and everything that is defined in Emacs.  Press RETURN on an item to see the help associated with it.&lt;/br&gt;&lt;/br&gt;An important thing to note about this command is that the list of symbols may change throughout the Emacs process's lifetime.  That's because Emacs is, for lack of a better term, clay.  You may not be aware of this but Emacs is a living, breathing Lisp environment.  You can change the meaning of defined symbols on-the-fly or add new definitions without having to restart Emacs.  This is the magic behind those demos you might have seen of programming in a &lt;a href='https://www.youtube.com/watch?v=7XUWpze_A_s'&gt;live lisp environment&lt;/a&gt;.&lt;h2&gt;&lt;a name=&quot;helm&amp;#95;extensions&quot;&gt;&lt;/a&gt;Helm Extensions&lt;/h2&gt;&lt;h3&gt;&lt;a name=&quot;helm-dash&quot;&gt;&lt;/a&gt;helm-dash&lt;/h3&gt;&lt;p&gt;The helm-dash package lets you search programming language  documentation through &quot;docsets&quot; you've installed on your machine.  Install docsets for a language using the 'helm-dash-install-docset'  command and search them using the 'helm-dash' command.  Press RETURN  on a result to open the documentation in your default browser.&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/areina/helm-dash'&gt;helm-dash github&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;evalator&quot;&gt;&lt;/a&gt;evalator&lt;/h3&gt;&lt;p&gt;Evalator is a new kind of REPL that I wrote for Emacs that lets  you interactively transform data. It evaluates expressions in   Emacs Lisp by default but it can support any language provided  you've installed the evaluation context package.&lt;/p&gt;&lt;p&gt;I use evalator mainly as a calculator and a quick experimentation tool  when I'm writing Emacs Lisp and Clojure code.  It feels much quicker  than using a normal REPL because expressions are evaluated  automatically.&lt;/p&gt;&lt;p&gt;Evalator starts with a prompt where you supply an expression to  generate the initial data.  Following expressions transform that data  on a per-element basis so its very easy to transform lists and other  collections.  You can also use evalator in explicit mode, which allows  you to transform data as usual, but it lets you generate the  equivalent code of the entire transformation.&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/seanirby/evalator'&gt;evalator github&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;helm-descbinds&quot;&gt;&lt;/a&gt;helm-descbinds&lt;/h3&gt;I really love this one.  helm-descbinds shows you all the shortcuts  that can be executed based on your current major-mode and minor modes.&lt;/br&gt;&lt;/br&gt;&lt;a href='https://github.com/emacs-helm/helm-descbinds'&gt;helm-descbinds github&lt;/a&gt;&lt;h3&gt;&lt;a name=&quot;helm-projectile&quot;&gt;&lt;/a&gt;helm-projectile&lt;/h3&gt;If you've ever wanted to browse all the files in a particular directory ala Sublime Text then you want helm-projectile.&lt;/br&gt;&lt;/br&gt;helm-projectile is a helm extension for the projectile package, which provides utilities for managing your programming projects.  A project is essentially a folder with files.  Projects are automatically added to projectile if they have a VCS directory like a '.git' or '.svn'.&lt;/br&gt;&lt;/br&gt;There are tons of useful projectile commands I could demo, but &lt;a href='http://tuhdo.github.io/helm-projectile.html'&gt;tuhdo covered this better than I ever could&lt;/a&gt;.&lt;p&gt;&lt;a href='http://tuhdo.github.io/helm-projectile.html'&gt;helm-projectile github&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I hope by now that I've convinced you to check out helm.  It really  is an innovative way of interacting with Emacs.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;#&quot; name=&quot;update&quot;&gt;&lt;/a&gt;&lt;h2&gt;&lt;a name=&quot;update&amp;#95;(2/18/2016):&quot;&gt;&lt;/a&gt;UPDATE (2/18/2016):&lt;/h2&gt;&lt;/p&gt;&lt;p&gt;After sharing this article on the &lt;a href='https://reddit.com/r/emacs'&gt;Emacs subreddit&lt;/a&gt;, I received an excellent comment from an Emacs package author I admire very much, &lt;a href='https://github.com/abo-abo'&gt;Oleh Krehel&lt;/a&gt;, AKA abo-abo.  He makes &lt;a href='https://github.com/abo-abo/hydra'&gt;some&lt;/a&gt; &lt;a href='https://github.com/abo-abo/lispy'&gt;very&lt;/a&gt; &lt;a href='https://github.com/abo-abo/avy'&gt;innovative&lt;/a&gt; &lt;a href='https://github.com/abo-abo/swiper'&gt;tools&lt;/a&gt; for Emacs including a completion framework called &lt;a href='http://oremacs.com/2015/04/16/ivy-mode/'&gt;ivy&lt;/a&gt;,  which many Emacs users prefer to helm.&lt;/p&gt;&lt;p&gt;In his reply, Oleh argues that if the built-in Emacs function &lt;code&gt;completing-read&lt;/code&gt; were updated, then packages that extend helm could be used in all the different completion frameworks.  This includes ivy, icicles, ido, and others.  &lt;a href='https://www.reddit.com/r/emacs/comments/46ibsx/why_i_use_helm_and_why_you_should_too/d05pdow'&gt;Here's the conversation&lt;/a&gt; and I've included his comment below(formatting has been added):&lt;/p&gt;&lt;p&gt;&lt;blockquote&gt; Nice article, very good-looking presentation.&lt;/p&gt;&lt;p&gt;However, you repeat the opinion that the completion (which is a great thing to have) is welded to the method of presenting said completion (in this case, Helm). Many other people do this as well, with 112 packages in MELPA having &quot;helm-&quot; in their name. Hard-wiring completion to helm prevents access to ~100 packages for users that like other methods of presenting completion.&lt;/p&gt;&lt;p&gt;In the short run, it's convenient to live in Helm's bubble: assume that Helm is all you'll ever need and hard-wire everything to Helm. But most helm-foo packages out there simply consist of three things:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Functions that generate the list of strings.&lt;/li&gt;&lt;li&gt;Functions that take a single string - the selected candidate, and do something with it.&lt;/li&gt;&lt;li&gt;The helm glue that wires the first group to the second.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The non-helm people could make use of the functions in group-1 and group-2. The two problems they face: There's no glue. This could be solved by completing packages relying on the built-in &lt;code&gt;completing-read&lt;/code&gt; more. There's a helm dependency. This isn't severe, but if you don't use helm you don't want to pay the overhead of &lt;code&gt;(require 'helm)&lt;/code&gt; and having to update helm from the package manager.&lt;/p&gt;&lt;p&gt;These two problems can be solved eventually by having a better completing-read API in the core. So that a package that only wants to provide completion can call completing-read and not be tied to any completion presentation framework. Two new parameters would be especially good to have: action - a lambda that decides what to do with the selected candidate, and caller - a symbol that identifies the completion session for purposes of customization (since this-command isn't reliable).&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;example&amp;#95;translation&quot;&gt;&lt;/a&gt;Example translation&lt;/h2&gt;&lt;h3&gt;&lt;a name=&quot;before:&quot;&gt;&lt;/a&gt;Before:&lt;/h3&gt;&lt;p&gt;Here we have helm-rhythmbox, an excellent package that provides a function from group-1 - &lt;code&gt;helm-rhythmbox-candidates&lt;/code&gt; that produces a list of songs on your system; and two functions from group-2 - &lt;code&gt;helm-rhythmbox-play-song&lt;/code&gt; and &lt;code&gt;helm-rhythmbox-enqueue-song&lt;/code&gt; that act on the selected song.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defvar helm-source-rhythmbox-track-search
'&amp;#40;&amp;#40;name . &amp;quot;Rhythmbox&amp;quot;&amp;#41;
    &amp;#40;candidates . helm-rhythmbox-candidates&amp;#41;
    &amp;#40;action . &amp;#40;&amp;#40;&amp;quot;Play song&amp;quot; . helm-rhythmbox-play-song&amp;#41;
            &amp;#40;&amp;quot;Enqueue song&amp;quot; . helm-rhythmbox-enqueue-song&amp;#41;&amp;#41;&amp;#41;
    &amp;#40;init . &amp;#40;lambda &amp;#40;&amp;#41; &amp;#40;unless rhythmbox-library
                    &amp;#40;rhythmbox-load-library&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
;;;###autoload
&amp;#40;defun helm-rhythmbox &amp;#40;&amp;#41;
    &amp;quot;Choose a song from the Rhythmbox library to play or enqueue.&amp;quot;
    &amp;#40;interactive&amp;#41;
    &amp;#40;helm :sources '&amp;#40;helm-source-rhythmbox-track-search&amp;#41;
            :buffer &amp;quot;&amp;#42;helm-rhythmbox&amp;#42;&amp;quot;&amp;#41;&amp;#41;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a name=&quot;after:&quot;&gt;&lt;/a&gt;After:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;;;;###autoload
&amp;#40;defun rhythmbox &amp;#40;&amp;#41;
    &amp;quot;Choose a song from the Rhythmbox library to play or enqueue.&amp;quot;
    &amp;#40;interactive&amp;#41;
    &amp;#40;unless rhythmbox-library
        &amp;#40;rhythmbox-load-library&amp;#41;&amp;#41;
    &amp;#40;completing-read &amp;quot;Rhythmbox: &amp;quot; &amp;#40;helm-rhythmbox-candidates&amp;#41;
                    nil nil nil nil nil nil
                    'helm-rhythmbox-play-song
                    'rhythmbox&amp;#41;&amp;#41;
;; ideally, the following sections are not needed at all
&amp;#40;eval-after-load 'helm
;; non-essential helm-specific customization via the 'rhythmbox key
&amp;#41;
&amp;#40;eval-after-load 'ivy
;; non-essential ivy-specific customization via the 'rhythmbox key
&amp;#41;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we have a rhythmbox command that could act in exactly the same way as helm-rhythmbox when helm-mode (available with Helm) is on. But this command would also work excellently with Ivy or Ido or Icicles or Icomplete or built-in completion. This command could live in a rhythmbox package that does not depend on helm, since it doesn't use anything Helm-specific.&lt;/p&gt;&lt;p&gt;&lt;/blockquote&gt;&lt;/p&gt;&lt;p&gt;I'm glad Oleh joined in on the discussion and I think he makes a great case for why the &lt;code&gt;completing-read&lt;/code&gt; function should be updated.  Thanks Oleh!&lt;/p&gt;&lt;p&gt;— sean&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 18 Feb 2016 00:00:00 -0800
</pubDate>
</item>
<item>
<guid>
TODO/posts/a-simple-keyboard-macro-demo.html
</guid>
<link>
TODO/posts/a-simple-keyboard-macro-demo.html
</link>
<title>
A Simple Keyboard Macro Demo
</title>
<description>
 &lt;p&gt;&lt;iframe id=&quot;embedded&quot; src=&quot;https://www.youtube.com/embed/K0Rw08es0Hs&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 11 Feb 2016 00:00:00 -0800
</pubDate>
</item>
<item>
<guid>
TODO/posts/parsing-an-elisp-file-with-evalator.html
</guid>
<link>
TODO/posts/parsing-an-elisp-file-with-evalator.html
</link>
<title>
Parsing an Elisp File with Evalator
</title>
<description>
&lt;p&gt;Last month I released my first Emacs package, &lt;a href='https://github.com/seanirby/evalator'&gt;evalator&lt;/a&gt;.  It's basically a new kind of REPL for transforming data.  It can support multiple languages such as &lt;a href='https://github.com/seanirby/evalator-clojure'&gt;Clojure&lt;/a&gt; and it also provides some cool features like history and code generation.  I knew it would be a useful tool because I was using it to help me build it.&lt;/p&gt;&lt;p&gt;While you can certainly start using evalator now, it's kind of in an experimental stage.  Once it's a more fully formed thing I'll write an extensive post here.  For now, I want to share this video where I show how to parse an Elisp file with evalator.  This video demonstrates one of the coolest features of Lisp: &lt;a href='https://en.wikipedia.org/wiki/Homoiconicity'&gt;homoiconicity&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;iframe id=&quot;embedded&quot; src=&quot;https://www.youtube.com/embed/OMDHmULenVU&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;p&gt;You can find evalator on MELPA and MELPA stable. Install it by running:&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;pre&gt;&lt;code&gt;M-x package-install evalator &lt;/code&gt;&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;You can also install evalator-clojure which includes a clojure evaluation context:&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;pre&gt;&lt;code&gt;M-x package-install evalator-clojure &lt;/code&gt;&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;See the Github repos for &lt;a href='https://github.com/seanirby/evalator'&gt;evalator&lt;/a&gt; and &lt;a href='https://github.com/seanirby/evalator'&gt;evalator-clojure&lt;/a&gt; for more details.&lt;/p&gt;&lt;p&gt;&amp;ndash; sean&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 09 Feb 2016 00:00:00 -0800
</pubDate>
</item>
</channel>
</rss>
